{"version":3,"sources":["store/characters/types.ts","components/formElements/Input/index.tsx","components/forms/CharacterForm/hooks.ts","components/formElements/Select/index.tsx","components/forms/CharacterForm/validation.ts","helpers/getFormikError.ts","components/forms/CharacterForm/index.tsx","pages/CharacterUpdate/hooks.tsx","pages/CharacterUpdate/index.tsx"],"names":["ClassType","Input","name","props","field","TextField","defaultProps","variant","useAddOrUpdateCharacter","character","dispatch","useDispatch","history","useHistory","values","actions","updateCharacter","addCharacter","createNewCharacter","push","formValues","slot","level","defence","accuracy","classType","useDeleteCharacter","removeCharacter","Select","id","options","label","FormControl","InputLabel","labelId","map","option","MenuItem","value","isMoreThanZero","CANT_BE_LESS_THAN_ZERO","validationObject","Yup","required","test","length","oneOf","Object","validationSchema","defined","getError","property","form","submitCount","touched","errors","undefined","CharacterForm","handleSubmit","handleDelete","characters","useSelector","state","Container","maxWidth","Paper","style","padding","initialValues","getInitialValues","onSubmit","formProps","Grid","container","alignItems","spacing","item","xs","sm","type","error","hasError","helperText","disabled","getClassesAsOptions","Button","color","onClick","getSlotValue","BEGINNER","existingCharacter","findIndex","getCharacter","characterName","useParams","find","CharacterUpdate","Box","Typography","gutterBottom"],"mappings":"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","file":"static/js/6.99a0bf4c.chunk.js","sourcesContent":["export interface CharactersState {\n  characters: Character[]\n}\n\nexport interface Character {\n  name: string;\n  classType: ClassType;\n  level: number;\n  defence: number;\n  accuracy: number;\n  skills?: Skills\n}\n\nexport enum ClassType {\n  BEGINNER = 'Beginner',\n  JOURNEYMAN = 'Journeyman',\n  WARRIOR = 'Warrior',\n  BARBARIAN = 'Barbarian',\n  SQUIRE = 'Squire',\n  ARCHER = 'Archer',\n  BOWMAN = 'Bowman',\n  HUNTER = 'Hunter',\n  MAGE = 'Mage',\n  WIZARD = 'Wizard',\n  SHAMAN = 'Shaman'\n}\n\ninterface Skills {\n  mining?: Skill;\n  chopping?: Skill;\n  fishing?: Skill;\n  catching?: Skill;\n  smithing?: AnvilStats;\n  alchemy?: Skill;\n}\n\ninterface Skill {\n  level: number;\n}\n\ninterface AnvilStats extends Skill {\n  bonusExp: number;\n  speedPerHour: number;\n  capacity: number;\n}\n","import { TextField, TextFieldProps } from '@material-ui/core';\nimport { Field, FieldProps } from 'formik';\nimport React from 'react';\n\ntype InputProps = TextFieldProps & {\n  variant?: 'filled' | 'outlined'\n}\n\nexport const Input: React.FC<InputProps> = ({ name, ...props }: InputProps) => (\n  <Field name={name}>\n    {({ field }: FieldProps) => (\n      <TextField {...props} {...field} />\n    )}\n  </Field>\n);\n\nInput.defaultProps = {\n  variant: 'filled',\n};\n\nexport default Input;\n","import { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { Character } from '../../../store/characters/types';\n\nimport { actions } from '../../../store/characters/slice';\nimport { CharacterFormFields } from '.';\nimport { CharacterWithSlot } from './types';\n\nexport const useAddOrUpdateCharacter = (\n  character?: Character,\n): ((values: CharacterFormFields) => void\n  ) => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  return (values: CharacterFormFields) => {\n    if (character) {\n      dispatch(actions.updateCharacter({ ...character, ...values }));\n    } else {\n      dispatch(actions.addCharacter(createNewCharacter(values)));\n    }\n    history.push('/');\n  };\n};\n\nconst createNewCharacter = (formValues: CharacterFormFields): CharacterWithSlot => ({\n  slot: formValues.slot,\n  name: formValues.name,\n  level: formValues.level,\n  defence: formValues.defence,\n  accuracy: formValues.accuracy,\n  classType: formValues.classType,\n});\n\nexport const useDeleteCharacter = (character?: Character)\n  : ((event: any) => void) => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  return () => {\n    if (character) {\n      dispatch(actions.removeCharacter(character));\n      history.push('/');\n    }\n  };\n};\n\nexport default { useAddOrUpdateCharacter, useDeleteCharacter };\n","import {\n  FormControl,\n  InputLabel, MenuItem, Select as MaterialSelect, SelectProps as MaterialSelectProps,\n} from '@material-ui/core';\nimport { Field, FieldProps } from 'formik';\nimport React from 'react';\n\ninterface Option {\n  value: string | number,\n  label: string,\n}\n\ninterface SelectProps extends MaterialSelectProps {\n  variant?: 'filled' | 'outlined'\n  options: Option[],\n}\n\nexport const Select: React.FC<SelectProps> = ({\n  id, name, options, label, ...props\n}: SelectProps) => (\n  <Field name={name}>\n\n    {({ field }: FieldProps) => (\n      <FormControl>\n        <InputLabel id={`${id}-select-label`}>{label}</InputLabel>\n        <MaterialSelect {...props} {...field} labelId={`${id}-select-label`}>\n          {options.map((option) => (\n            <MenuItem key={option.value} value={option.value}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </MaterialSelect>\n      </FormControl>\n    )}\n  </Field>\n);\n\nSelect.defaultProps = {\n  variant: 'filled',\n};\n\nexport default Select;\n","import * as Yup from 'yup';\nimport { CharacterFormFields } from '.';\nimport { ClassType } from '../../../store/characters/types';\n\nconst isMoreThanZero = (value: number | undefined): boolean => (value ? value > 0 : false);\nconst isLongerThanZero = (value: string | undefined): boolean => (value ? value.length > 0 : false);\nconst CANT_BE_LESS_THAN_ZERO = 'Can\\'t be less than 1';\nconst validationObject = {\n  slot: Yup.number()\n    .required('Character slot is required')\n    .test('minimum', CANT_BE_LESS_THAN_ZERO, isMoreThanZero),\n  name: Yup.string()\n    .required('Name is required')\n    .test('minLenght', 'Name has to be atleast one character', isLongerThanZero),\n  level: Yup.number()\n    .required('Level is required')\n    .test('minimum', CANT_BE_LESS_THAN_ZERO, isMoreThanZero),\n  defence: Yup.number()\n    .required('Defence is required')\n    .test('minimum', CANT_BE_LESS_THAN_ZERO, isMoreThanZero),\n  accuracy: Yup.number()\n    .required('Accuracy is required')\n    .test('minimum', CANT_BE_LESS_THAN_ZERO, isMoreThanZero),\n  classType: Yup.mixed().oneOf(Object.values(ClassType)),\n};\n\n// eslint-disable-next-line max-len\nexport const validationSchema = (): Yup.SchemaOf<CharacterFormFields> => Yup.object(validationObject).defined();\n\nexport default validationSchema;\n","import { FormikProps } from 'formik';\n\nexport function getError<T>(property: keyof T, form: FormikProps<T>): any | undefined {\n  return form.submitCount > 0 || form.touched[property] ? form.errors[property] : undefined;\n}\n\nexport default getError;\n","import React from 'react';\nimport { Form, Formik, FormikProps } from 'formik';\nimport {\n  Button, Container, Grid, Paper,\n} from '@material-ui/core';\n\nimport { useSelector } from 'react-redux';\nimport { Character, ClassType } from '../../../store/characters/types';\nimport { Input } from '../../formElements/Input';\nimport { useAddOrUpdateCharacter, useDeleteCharacter } from './hooks';\nimport { Select } from '../../formElements/Select';\nimport { validationSchema } from './validation';\nimport { getError } from '../../../helpers/getFormikError';\nimport { ReduxState } from '../../../app/rootReducer';\n\ninterface CharacterFormProps {\n  character?: Character;\n}\n\nexport interface CharacterFormFields {\n  slot: number,\n  name: string,\n  level: number,\n  defence: number,\n  accuracy: number,\n  classType: ClassType\n}\n\nexport const CharacterForm: React.FC<CharacterFormProps> = ({ character }: CharacterFormProps) => {\n  const handleSubmit = useAddOrUpdateCharacter(character);\n  const handleDelete = useDeleteCharacter(character);\n  const { characters } = useSelector((state: ReduxState) => state.characters);\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Paper style={{ padding: 16 }}>\n        <Formik\n          initialValues={getInitialValues(character, characters)}\n          validationSchema={validationSchema}\n          onSubmit={handleSubmit}\n        >\n          {(formProps: FormikProps<CharacterFormFields>) => (\n            <Form>\n              <Grid container alignItems=\"flex-start\" spacing={2}>\n                <Grid item xs={12} sm={6}>\n                  <Input id=\"slot\" name=\"slot\" label=\"Character slot\" type=\"number\" error={hasError('slot', formProps)} helperText={getError('slot', formProps)} />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <Input id=\"name\" name=\"name\" label=\"Name\" disabled={character?.name !== undefined} error={hasError('name', formProps)} helperText={getError('name', formProps)} />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <Select id=\"classType\" name=\"classType\" label=\"Class\" options={getClassesAsOptions()} error={hasError('classType', formProps)} />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <Input id=\"level\" name=\"level\" label=\"Level\" type=\"number\" error={hasError('level', formProps)} helperText={getError('level', formProps)} />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <Input id=\"defence\" name=\"defence\" label=\"Defence\" type=\"number\" error={hasError('defence', formProps)} helperText={getError('defence', formProps)} />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <Input id=\"accuracy\" name=\"accuracy\" label=\"Accuracy\" type=\"number\" error={hasError('accuracy', formProps)} helperText={getError('accuracy', formProps)} />\n                </Grid>\n              </Grid>\n              <br />\n              <Button variant=\"contained\" color=\"primary\" type=\"submit\">{character ? 'Update' : 'Add'}</Button>\n              {character && <Button variant=\"text\" color=\"secondary\" type=\"button\" onClick={handleDelete}>Delete</Button>}\n            </Form>\n          )}\n        </Formik>\n\n      </Paper>\n    </Container>\n  );\n};\n\nconst hasError = (property: keyof CharacterFormFields, form: FormikProps<CharacterFormFields>)\n  : boolean => getError(property, form) !== undefined;\n\nconst getClassesAsOptions = () => Object.values(ClassType)\n  .map((value: string) => ({ value, label: value }));\n\nfunction getInitialValues(character: Character | undefined, characters: Character[]): any {\n  return {\n    slot: getSlotValue(characters, character),\n    name: character?.name ?? '',\n    level: character?.level ?? '',\n    defence: character?.defence ?? '',\n    accuracy: character?.accuracy ?? '',\n    classType: character?.classType ?? ClassType.BEGINNER,\n  };\n}\n\nCharacterForm.defaultProps = {\n  character: undefined,\n};\n\nexport default CharacterForm;\n\nfunction getSlotValue(characters: Character[], existingCharacter?: Character | undefined) {\n  if (existingCharacter) {\n    const index = characters.findIndex(\n      (character) => character.name === existingCharacter.name,\n    );\n    return index + 1;\n  }\n  return characters.length + 1;\n}\n","import { useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport { ReduxState } from '../../app/rootReducer';\nimport { Character } from '../../store/characters/types';\n\nexport const getCharacter = (): Character | undefined => {\n  const { characterName } = useParams<{ characterName: string }>();\n  const { characters } = useSelector((state: ReduxState) => state.characters);\n  return characters.find((character: Character) => character.name === characterName);\n};\n\nexport default getCharacter;\n","import { Box, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { CharacterForm } from '../../components/forms/CharacterForm';\nimport { getCharacter } from './hooks';\n\nexport const CharacterUpdate: React.FC = (): React.ReactElement => {\n  const character = getCharacter();\n\n  return (\n    <Box>\n      <Typography variant=\"h1\" gutterBottom>{character ? `Edit ${character.name}` : 'Add Character'}</Typography>\n      <CharacterForm character={character} />\n    </Box>\n  );\n};\n\nexport default CharacterUpdate;\n"],"sourceRoot":""}