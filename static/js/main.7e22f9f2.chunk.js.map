{"version":3,"sources":["router/index.tsx","app/rootReducer.ts","app/store.ts","app/global-style.tsx","components/topbar/index.tsx","app/App.tsx","helpers/serviceWorker/serviceWorkerRegistration.ts","helpers/reportWebVitals.ts","index.tsx","store/characters/slice.ts"],"names":["Landingpage","lazy","CharacterUpdate","NoMatch","to","LoadingFallback","Router","basename","packageJson","publicPath","exact","path","render","fallback","component","rootReducer","combineReducers","characters","charactersReducer","middleware","getDefaultMiddleware","thunk","store","configureStore","reducer","GlobalStyle","createGlobalStyle","props","darkMode","darkmodeBackground","lightmodeBackground","getBackgroundImage","useStyles","makeStyles","createStyles","root","display","flexWrap","position","top","right","zIndex","Topbar","handleThemeChange","tooltip","ThemeIcon","classes","className","Tooltip","title","aria-label","IconButton","onClick","App","useState","darkState","setDarkState","palletType","theme","createMuiTheme","palette","type","prefersDarkMode","useMediaQuery","useEffect","ThemeProvider","CssBaseline","Container","maxWidth","Box","my","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","initialState","charactersFromStorage","localStorage","getItem","JSON","parse","getInitialValues","charactersSlice","createSlice","name","reducers","setCharacters","state","action","payload","addCharacter","push","updateLocalStorage","updateCharacter","updatedCharacter","index","findIndex","character","removeCharacter","updatedCharactersList","filter","setItem","stringify","actions"],"mappings":"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","file":"static/js/main.7e22f9f2.chunk.js","sourcesContent":["import React, { lazy, Suspense } from 'react';\nimport {\n  BrowserRouter, Redirect, Route, Switch,\n} from 'react-router-dom';\n\nimport packageJson from '../../package.json';\n\nexport const Landingpage = lazy(() => import('../pages/Landingpage'));\nexport const CharacterUpdate = lazy(() => import('../pages/CharacterUpdate'));\n\nconst NoMatch = () => <Redirect to=\"/\" />;\n\nconst LoadingFallback = () => <div>Loading...</div>;\n\nconst Router = (): React.ReactElement => (\n  <BrowserRouter basename={packageJson.publicPath}>\n    <Switch>\n      <Route\n        exact\n        path=\"/\"\n        render={() => (\n          <Suspense fallback={<LoadingFallback />}>\n            <Landingpage />\n          </Suspense>\n        )}\n      />\n      <Route\n        exact\n        path=\"/add\"\n        render={() => (\n          <Suspense fallback={<LoadingFallback />}>\n            <CharacterUpdate />\n          </Suspense>\n        )}\n      />\n      <Route\n        exact\n        path=\"/edit/:characterName\"\n        render={() => (\n          <Suspense fallback={<LoadingFallback />}>\n            <CharacterUpdate />\n          </Suspense>\n        )}\n      />\n      <Route component={NoMatch} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Router;\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport charactersReducer from '../store/characters/slice';\n\nconst rootReducer = combineReducers({\n  characters: charactersReducer,\n\n});\n\nexport type ReduxState = ReturnType<typeof rootReducer>;\nexport default rootReducer;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n\n// eslint-disable-next-line import/extensions\nimport rootReducer from './rootReducer';\n\nconst middleware = [...getDefaultMiddleware({ thunk: false })];\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware,\n});\n\nexport default store;\n","import { createGlobalStyle } from 'styled-components';\n\ninterface GlobalStyleProps {\n  darkMode: boolean;\n}\n\nconst GlobalStyle = createGlobalStyle<GlobalStyleProps>`\n  * {\n    margin: 0;\n    position: relative;\n    box-sizing: border-box;\n  }\n  body {\n    background-image: url(${(props) => (getBackgroundImage(props.darkMode))});\n  }\n`;\n\nexport default GlobalStyle;\n\nfunction getBackgroundImage(darkMode:boolean) {\n  const darkmodeBackground = 'https://www.legendsofidleon.com/ytGl5oc/assets/graphics/2x/background-260-0.png?996607';\n  const lightmodeBackground = 'https://www.legendsofidleon.com/ytGl5oc/assets/graphics/2x/background-228-0.png?996607';\n  return darkMode ? darkmodeBackground : lightmodeBackground;\n}\n","import {\n  createStyles, IconButton, makeStyles, Tooltip,\n} from '@material-ui/core';\nimport React from 'react';\n\nimport Brightness7Rounded from '@material-ui/icons/Brightness7Rounded';\nimport Brightness4Rounded from '@material-ui/icons/Brightness4Rounded';\n\ninterface TopbarProps {\n  darkMode: boolean;\n  handleThemeChange: () => void,\n}\n\nconst useStyles = makeStyles(() => createStyles({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    position: 'absolute',\n    top: '0px',\n    right: '2rem',\n    zIndex: 100,\n  },\n}));\n\nexport const Topbar: React.FC<TopbarProps> = ({\n  darkMode,\n  handleThemeChange,\n}: TopbarProps): React.ReactElement => {\n  const tooltip = `Change to ${darkMode ? 'light' : 'dark'} theme`;\n\n  const ThemeIcon = () => {\n    if (darkMode) {\n      return <Brightness7Rounded />;\n    }\n    return <Brightness4Rounded />;\n  };\n\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Tooltip title={tooltip} aria-label={tooltip}>\n        <IconButton aria-label=\"change theme\" onClick={handleThemeChange}>\n          <ThemeIcon />\n        </IconButton>\n      </Tooltip>\n    </div>\n  );\n};\n\nexport default Topbar;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport './App.css';\nimport { Provider as ReduxProvider } from 'react-redux';\nimport Container from '@material-ui/core/Container';\nimport { Box } from '@material-ui/core';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Router from '../router';\nimport store from './store';\nimport GlobalStyle from './global-style';\nimport Topbar from '../components/topbar';\n\nconst App = () => {\n  const [darkState, setDarkState] = useState(false);\n  const palletType = darkState ? 'dark' : 'light';\n\n  const theme = createMuiTheme({\n    palette: {\n      type: palletType,\n    },\n  });\n\n  const handleThemeChange = (): void => {\n    setDarkState(!darkState);\n  };\n\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  useEffect(() => {\n    if (prefersDarkMode) {\n      setDarkState(prefersDarkMode);\n    }\n  }, [prefersDarkMode]);\n\n  return (\n    <ReduxProvider store={store}>\n      <Fragment>\n        <GlobalStyle darkMode={darkState} />\n        <ThemeProvider theme={theme}>\n          <CssBaseline />\n          <Topbar darkMode={darkState} handleThemeChange={handleThemeChange} />\n          <Container maxWidth=\"lg\">\n            <Box my={4}>\n              <Router />\n            </Box>\n          </Container>\n        </ThemeProvider>\n      </Fragment>\n    </ReduxProvider>\n  );\n};\n\nexport default App;\n","/* eslint-disable no-console */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-undef */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://cra.link/PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://cra.link/PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorkerRegistration from './helpers/serviceWorker/serviceWorkerRegistration';\nimport reportWebVitals from './helpers/reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Character, CharactersState } from './types';\n\nconst getInitialValues = (): CharactersState => {\n  const initialState: CharactersState = { characters: [] };\n  const charactersFromStorage: string | null = localStorage.getItem('characters');\n  if (charactersFromStorage) {\n    initialState.characters = JSON.parse(charactersFromStorage) as Character[];\n  }\n  return initialState;\n};\n\nconst initialState: CharactersState = getInitialValues();\n\nconst charactersSlice = createSlice({\n  name: 'characters',\n  initialState,\n  reducers: {\n    setCharacters: (state, action: PayloadAction<Character[]>) => {\n      state.characters = action.payload;\n    },\n    addCharacter: (state, action: PayloadAction<Character>) => {\n      state.characters.push(action.payload);\n      updateLocalStorage(state.characters);\n    },\n    updateCharacter: (state, action: PayloadAction<Character>) => {\n      const updatedCharacter = action.payload;\n      const index = state.characters.findIndex(\n        (character) => character.name === updatedCharacter.name,\n      );\n      state.characters[index] = updatedCharacter;\n      updateLocalStorage(state.characters);\n    },\n    removeCharacter: (state, action: PayloadAction<Character>) => {\n      const updatedCharactersList = state.characters\n        .filter((character) => character.name !== action.payload.name);\n\n      state.characters = updatedCharactersList;\n      updateLocalStorage(updatedCharactersList);\n    },\n  },\n});\n\nconst updateLocalStorage = (characters: Character[]) => localStorage.setItem('characters', JSON.stringify(characters));\n\nexport const { actions } = charactersSlice;\nexport default charactersSlice.reducer;\n"],"sourceRoot":""}